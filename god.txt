# quicksort

def partition(array:list, lb:int, ub:int) -> int:

    pivot = array[lb]
    start = lb
    end = ub

    while start < end:
        while array[start] <= pivot and start < ub:
            start += 1

        while array[end] > pivot:
            end -= 1

        if start < end:
            array[start], array[end] = array[end], array[start]

    array[lb], array[end] = array[end], array[lb]

    return end


def quicksort(array: list, low: int, high: int) -> None:
    if low < high:
        part = partition(array, low, high)
        quicksort(array, 0, part-1)
        quicksort(array, part+1, high)

#merge sort

def merge(arr: list, low: int, mid: int, high: int) -> None:

    n1 = mid - low + 1
    n2 = high - mid

    l_arr = [0] * n1
    r_arr = [0] * n2

    for i in range(n1):
        l_arr[i] = arr[low + i]

    for j in range(n2):
        r_arr[j] = arr[mid + 1 + j]

    i = 0
    j = 0
    k = low

    while i < n1 and j < n2:
        if l_arr[i] <= r_arr[j]:
            arr[k] = l_arr[i]
            i += 1
        else:
            arr[k] = r_arr[j]
            j += 1
        k += 1

    while i < n1:
        arr[k] = l_arr[i]
        i += 1
        k += 1

    while j < n2:
        arr[k] = r_arr[j]
        j += 1
        k += 1


def merge_sort(arr: list, low: int, high: int) -> None:

    if low < high:
        mid = (low+high)//2
        merge_sort(arr, low, mid)
        merge_sort(arr, mid+1, high)
        merge(arr, low, mid, high)

#heap sort

def heapify(arr: list, n: int, i: int) -> None:
    largest = i
    l_node = 2 * i + 1
    r_node = 2 * i + 2

    if l_node < n and arr[i] < arr[l_node]:
        largest = l_node

    if r_node < n and arr[largest] < arr[r_node]:
        largest = r_node

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)


def heap_sort(arr: list) -> None:

    n = len(arr)
    for i in range(n // 2, -1, -1):
        heapify(arr, n, i)

    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)


#array = [50,20,10,60,40,30]
#heap_sort(array)
#print(array)

#bfs
def bfs(arr:list,start:int) -> None:
    print("bfs = ", end = " ")
    visited = [False] * len(arr)
    queue = list()
    queue.append(arr[start-1])
    visited[start-1] = True
    print(start,end = " ")
    for i in queue:
        for j in range(len(i)):
            tmp = i[j]
            if tmp == 1 and tmp not in queue and visited[j] == False:
                queue.append(arr[j])
                print(j+1,end = " ")
                visited[j] = True

a = [[0,1,0,1,1,0,0],
     [1,0,1,0,0,1,1],
     [0,1,0,0,0,0,0],
     [1,0,0,0,0,0,0],
     [1,0,0,0,0,0,0],
     [0,1,0,0,0,0,0],
     [0,1,0,0,0,0,0]]

#bfs(a,1)

def dfs(arr:list,starting:int) -> None:
    stack.append(arr[starting])
    visited[starting] = True

    print(starting,end = " ")
    for i in range(len(arr[starting])):
        tmp = arr[starting][i]
        if tmp == 1 and tmp not in stack and visited[i] == False:
            dfs(arr, i)

    stack.pop()


graph = [[0,1,0,1,0,0,0],
         [1,0,1,1,0,1,0],
         [0,1,0,1,1,1,0],
         [1,1,1,0,1,0,0],
         [0,0,1,1,0,0,1],
         [0,1,1,0,0,0,0],
         [0,1,0,0,1,0,0]]

graph1 = [[0,1,1,0,0,0,0,0],
          [1,0,0,1,1,0,0,0],
          [1,0,0,0,0,1,1,0],
          [0,1,0,0,0,0,0,1],
          [0,1,0,0,0,0,0,0],
          [0,0,1,0,0,0,0,0],
          [0,0,1,0,0,0,0,0],
          [0,0,0,1,0,0,0,0]]


stack = []
visited = [False] * len(graph)
#print("dfs = ", end = " ")
#dfs(graph,1)

#knapsack ratio algo

def prims(N:int, G:list, start: int) -> None:

    inf = 999999999999
    selected_node = [0] * N
    no_edge = 0

    selected_node[start] = True

    while no_edge < N-1:

        minimum = inf
        tmp_a = 0
        tmp_b = 0
        for m in range(N):
            if selected_node[m]:
                for n in range(N):
                    if not selected_node[n] and G[m][n]:
                        if minimum > G[m][n]:
                            minimum = G[m][n]
                            tmp_a = m
                            tmp_b = n
        print(str(tmp_a) + "-" + str(tmp_b) + " : " + str(G[tmp_a][tmp_b]))
        selected_node[tmp_b] = True
        no_edge += 1




#prims(len(G), G, 0)

def kruskal(N:int, G:list) -> None:
    edges = []
    weights = []
    edge = 0
    visited_nodes = []

    for i in range(N):
        for j in range(N):

            if G[i][j] != 0 and [j,i] not in edges:

                edges.append([i,j])
                weights.append(G[i][j])

    rsorted = zip(*sorted(zip(weights,edges)))

    weights, edges = rsorted

    for i in range(len(edges)):
        state = 0
        for j in range(N):
            if [edges[i][0],j] in visited_nodes and [edges[i][1],j] in visited_nodes:
                state = 1
        if state:
            continue
        visited_nodes.append(edges[i])
        visited_nodes.append([edges[i][1],edges[i][0]])
        print(str(edges[i][0]) + "-" + str(edges[i][1]) + " : " + str(weights[i]))
        edge += 1
        if edge >= N-1:
            return None


G = [[0, 1, 0, 0, 0],
     [1, 0, 1, 1, 0],
     [0, 1, 0, 1, 0],
     [0, 1, 1, 0, 1],
     [0, 0, 0, 1, 0]]

#kruskal(len(G), G)

# def fib(n, look):
#     if n <= 1:
#         look[n] = n
#
#     if look[n] is None:
#         look[n] = fib(n-1,look)+fib(n-2,look)
#     print(f"done in {n} turns ")
#     return look[n]
#
# n= 5
# look = [None] * 20
# print(fib(n-1,look))
# print(look)
# print(fib(n+10,look))
# print(look)
# print(fib(n+5,look))
# print(look)




#Output: [["Organization", "Organisation", "Group"], ["Dg set", "Diesel generator"], ["Orange", "Kinnu", "narangi"]
# output = []
# synonyms = [{"Dg set": "Diesel generator"}, {"Organization": "Organisation"}, {"Group": "Organization"}, {"Orange": "Kinnu"}, {"Orange": "narangi"}]
# for k in synonyms:
#     for i in k:
#         flag = 1
#         for j in output:
#             if i in j and k[i] not in j:
#                 j.append(k[i])
#                 flag = 0
#             elif k[i] in j and i not in j:
#                 j.append(i)
#                 flag = 0
#         if flag:
#             output.append([i,k[i]])
#
# print(output)

class Graph:
    l = {}
    def addEdge(self,a:int, b:list[float]) -> None:
        self.l[a] = b


    def maxprob(self,i:int) -> float:

        max1 = 0
        for j in range(3):
            if j != i:
                max1 += self.l[i][j]*self.l[j][i]

        return max1

    def minprob(self,i:int) -> float:

        max1 = 0
        chroot = 0
        c = 0
        for j in range(3):
            if j != i :
                if c < self.l[i][j]*(1-self.l[j][i]):
                    c = self.l[i][j]*(1-self.l[j][i])
                    chroot = j

                max1 += self.l[i][j]*(1-self.l[j][i])

        print(f" has to choose path no {chroot} to avoid collision and it's total minimum probability of collision")
        return max1

g = Graph()
for i in range(3):
    tmp = []
    for j in range(3):
        if j == i:
            tmp.append(0)
        else:
            pr = float(input(f"input probability for i = {i} car selecting j = {j} path: "))
            tmp.append(pr)
    g.addEdge(i,tmp)

a = int(input("Enter min probability of which car do you want: "))
print(g.minprob(a))
